plugins {
	id 'org.springframework.boot' version '2.6.8'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'com.cheocharm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
subprojects {
	group = 'com.cheocharm'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '11'

	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco'

	dependencies {
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		testImplementation 'org.springframework.security:spring-security-test'

		implementation group: 'org.hibernate', name: 'hibernate-spatial', version: '5.6.9.Final'
	}
	configurations {
		complieOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport
	}
}
dependencies {
//	developmentOnly 'org.springframework.boot:spring-boot-devtools'
//	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
}
jacoco {
	toolVersion = "0.8.8"
}

jacocoTestCoverageVerification {
	def QDomains = []
	for (qPattern in '*.QA'..'*.QZ') {
		QDomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			enabled = true
			element = "CLASS"

			// 모든 클래스 각각 라인 커버리지 10% 만족시 빌드 성공
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.6
			}

			excludes = [
					'*.*Application',
					'*.*Exception',
					'*.dto.*',
					'*.infrastructure.*',
					'*.common.*',
					'*.*.repository.vo.*',
					'*.BaseEntity',
					'*.ControllerAdvice',
			] + QDomains
		}
	}
}
tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {

	dependsOn test

	def Qdomains = []
	for(qPattern in "**/QA" .. "**/QZ"){
		Qdomains.add(qPattern+"*")
	}


	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/*request*",
					"**/*response*",
					"**/*vo*",
					"**/config/*",
					"**/*exception*"
			] + Qdomains)

		}))
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

tasks.named('jar') {
	enabled = false
}
