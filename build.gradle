buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}
plugins {
	id 'org.springframework.boot' version '2.6.8'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'jacoco'
}

group = 'com.cheocharm'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

	implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	//for health check
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//for coordinate
	implementation group: 'org.hibernate', name: 'hibernate-spatial', version: '5.6.9.Final'

	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

	//jeasy
	testImplementation group: 'org.jeasy', name: 'easy-random-core', version: '5.0.0'

	//mockito inline
	testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
}
jacoco {
	toolVersion = "0.8.8"
}

jacocoTestCoverageVerification {
	def QDomains = []
	for (qPattern in '*.QA'..'*.QZ') {
		QDomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			enabled = true
			element = "CLASS"

			// 모든 클래스 각각 라인 커버리지 10% 만족시 빌드 성공
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.6
			}

			excludes = [
					'*.*Application',
					'*.*Exception',
					'*.dto.*',
					'*.infrastructure.*',
					'*.common.*',
					'*.*.repository.vo.*',
					'*.BaseEntity',
					'*.ControllerAdvice',
			] + QDomains
		}
	}
}
tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {

	dependsOn test

	def Qdomains = []
	for(qPattern in "**/QA" .. "**/QZ"){
		Qdomains.add(qPattern+"*")
	}


	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/*request*",
					"**/*response*",
					"**/*vo*",
					"**/config/*",
					"**/*exception*"
			] + Qdomains)

		}))
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

tasks.named('jar') {
	enabled = false
}

def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
